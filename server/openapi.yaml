openapi: 3.1.0
info:
  title: Supervisor Server API
  version: "1.0"
  description: "The server-side of the Supervisor API"
components: 

  schemas:
    TaskList:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    Credentials:
      type: object
      properties:
        id:
          type: string
          minimumLength: 4
          maximumLength: 40
        key:
          type: string
    Task:
      type: object
      properties:
        name:
          type: string
          minimumLength: 3
          maximumLength: 40
        description:
          type: string
        runner:
          type: string
        creator:
          type: string
        data:
          type: string
        last_updated:
          format: date-time
        created_date:
          type: string
          format: date-time
  
paths:
  /task/{name}/maintain:
    post:
      description: 'Keep running the task.'
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: 'OK.'
        '403':
          description: 'User is not running the task.'
  /task/{name}/run:
    delete:
      description: Stop the task
      requestBody:
      # the credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: 'OK'
        '403':
          description: 'User is not running the task.'
    post:
      description: Run the task.
      requestBody:
      # the credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: 'OK'
        '403':
          description: 'User is not next in line.'
  
  /user:
    post:
      description: Register user and return its key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  minimumLength: 4
                  maximumLength: 40
                link:
                  type: string
                  nullable: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: string
        '409':
          description: 'User already exists.'
  /user/{id}:
    get:
      description: Get the link of the user.
      parameters:
        - name: id
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          description: 'OK'

          content:
            application/json:
              schema:
                type: string
        '404':
          description: 'User not found.'


  /task/{name}/queue:
    delete:
      description: 'Leave the queue for the task.'
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: 'OK'
          required: true
        '404':
          description: 'You are not in line.'
    put:
      description: 'Join the queue for the task.'
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: 'OK'
          required: true

          application/json:
            schema:
              type: integer
              description: 'Your number in line.'
        '409':
          description: 'You are already in line.'
  /task/{name}:
    delete:
      description: 'Delete the task.'
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '201':
          description: 'OK'
        '403':
          description: 'You are not the creator of the task.'
    put:
      description: Update task data
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                credentials:
                  $ref: '#/components/schemas/Credentials'
                data:
                  type: string
                  nullable: true
              
      responses:
        '201':
          description: 'OK'

        '403':
          description: 'You are not the runner of the task.'
    get:
      description: Fetch task
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: 'Task not found'
      
  /task:
    get:
      description: Fetch tasks
      parameters:
        - name: pattern
          schema:
            type: string
          in: query
        - name: limit
          schema:
            type: integer
          in: query
      responses:
        '200':
          description: 'OK'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'

    post:
      description: Create a new task
      responses:
        '201':
          description: 'OK'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credentials:
                  $ref: '#/components/schemas/Credentials'
                name:
                  type: string
                desc:
                  type: string
                  nullable: true
      